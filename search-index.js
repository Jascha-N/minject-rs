var searchIndex = {};
searchIndex["minject"] = {"doc":"# The minject-rs library\nThis library provides a simple API for injecting code (in the form of a DLL)\ninto another process on the Windows platform.","items":[[3,"Module","minject","A description of a module (DLL) to be injected into a process.",null,null],[3,"ModuleBuilder","","A module builder for a module without an initialization function.",null,null],[3,"ModuleBuilderWithInit","","A module builder for a module with an initialization function.",null,null],[3,"Shared","","A helper type for deserializing objects that can be constructed from a raw handle.",null,null],[4,"Error","","An error that can occur during the injection process.",null,null],[13,"Bitness","","The target process&#39;s bitness (32-bit vs 64-bit) does not match the current process&#39;s bitness.",0,null],[13,"LoadFailed","","The module could not be loaded into the target process.",0,null],[13,"InitNotFound","","The module&#39;s initializer function was not found.",0,null],[13,"InitError","","An error occurred when the initializer function was called.",0,null],[13,"Deserialize","","An error occurred while deserializing the error message.",0,null],[13,"UnexpectedExitCode","","The remote injection thread returned an unexpected exit code and probably crashed.",0,null],[13,"Io","","An I/O error occurred.",0,null],[4,"InitError","","An error that can occur in a call to an initializer function.",null,null],[13,"Panic","","A panic occurred.",1,null],[13,"Argument","","An argument could not be deserialized.",1,null],[13,"TooManyArguments","","Too many arguments were supplied.",1,null],[11,"into_inner","","Unwraps this `Shared` and returns the underlying object.",2,{"inputs":[{"name":"shared"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"shared"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"shared"}],"output":{"name":"t"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"init","","Call the given initializer function after loading the module.",3,{"inputs":[{"name":"modulebuilder"},{"name":"n"}],"output":{"name":"modulebuilderwithinit"}}],[11,"unwrap","","Constructs a module and consumes this builder.",3,{"inputs":[{"name":"modulebuilder"}],"output":{"name":"module"}}],[11,"arg","","Adds an argument to the initializer invocation.",4,{"inputs":[{"name":"modulebuilderwithinit"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"handle","","Adds a handle argument to the initializer invocation.",4,{"inputs":[{"name":"modulebuilderwithinit"},{"name":"h"}],"output":{"name":"result"}}],[11,"unwrap","","Constructs a module and consumes this builder.",4,{"inputs":[{"name":"modulebuilderwithinit"}],"output":{"name":"module"}}],[11,"new","","Creates a new module definition builder given the path to a module.",5,{"inputs":[{"name":"p"}],"output":{"name":"modulebuilder"}}],[11,"from","","",5,{"inputs":[{"name":"modulebuilder"}],"output":{"name":"module"}}],[11,"from","","",5,{"inputs":[{"name":"modulebuilderwithinit"}],"output":{"name":"module"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"deserializeerror"}],"output":{"name":"error"}}],[11,"from","std::io::error","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"process","minject","This module provides a drop-in replacement for most of the functionality\ninside the `std::process` module.",null,null],[3,"Child","minject::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",7,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",7,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",7,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin.",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout.",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr.",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned.",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",8,null],[12,"stdout","","The data that the process wrote to stdout.",8,null],[12,"stderr","","The data that the process wrote to stderr.",8,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[11,"kill","","Forces the child to exit.",7,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",7,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",7,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",7,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"as_raw_handle","","",7,{"inputs":[{"name":"child"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",7,{"inputs":[{"name":"child"}],"output":{"name":"rawhandle"}}],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"as_raw_handle","","",9,{"inputs":[{"name":"childstdin"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",9,{"inputs":[{"name":"childstdin"}],"output":{"name":"rawhandle"}}],[11,"read","","",10,null],[11,"as_raw_handle","","",10,{"inputs":[{"name":"childstdout"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",10,{"inputs":[{"name":"childstdout"}],"output":{"name":"rawhandle"}}],[11,"read","","",11,null],[11,"as_raw_handle","","",11,{"inputs":[{"name":"childstderr"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",11,{"inputs":[{"name":"childstderr"}],"output":{"name":"rawhandle"}}],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",12,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",12,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",12,null],[11,"env","","Inserts or updates an environment variable mapping.",12,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",12,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",12,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",12,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"inject","","Injects a module (DLL) before the child process&#39;s main thread starts.",12,{"inputs":[{"name":"command"},{"name":"m"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",12,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",12,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",12,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",12,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",12,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",12,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",8,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",13,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Success is defined as a zero exit status.",13,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process as an `Option`.",13,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"code_direct","","Returns the exit code of the process.",13,{"inputs":[{"name":"exitstatus"}],"output":{"name":"i32"}}],[11,"fmt","","",13,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",14,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",14,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `NUL`.",14,{"inputs":[],"output":{"name":"stdio"}}],[11,"from_raw_handle","","",14,{"inputs":[{"name":"rawhandle"}],"output":{"name":"stdio"}}],[14,"initializer!","minject","Creates a suitable initialization wrapper function around the given function.",null,null]],"paths":[[4,"Error"],[4,"InitError"],[3,"Shared"],[3,"ModuleBuilder"],[3,"ModuleBuilderWithInit"],[3,"Module"],[3,"Error"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"]]};
initSearch(searchIndex);
